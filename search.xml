<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[mysql修改密码方法]]></title>
    <url>%2F2019%2F05%2F10%2Fmysql%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[方法1： 首先登陆mysql 格式:set password for 用户名@localhost = password(&#39;新密码&#39;)； 例如：set password for root@localhost=password(&#39;0301&#39;);123456789101112131415161718[root@10-46-143-76 ~]# mysql -uroot -pEnter password: Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 145Server version: 5.6.44-log MySQL Community Server (GPL)Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.mysql&gt; set password for root@localhost=password(&apos;0301&apos;);Query OK, 0 rows affected (0.00 sec)mysql&gt; 方法2：用mysqladmin格式:mysqladmin -u用户名 -p旧密码 password 新密码例如:mysqladmin -uroot -p0301 password 1231234[root@10-46-143-76 ~]# mysqladmin -uroot -p password 123Enter password: mysqladmin: connect to server at &apos;localhost&apos; failederror: &apos;Access denied for user &apos;root&apos;@&apos;localhost&apos; (using password: YES)&apos; 方法3:首先登陆mysql1234567891011121314151617181920212223242526272829[root@10-46-143-76 ~]# mysql -uroot -pEnter password: Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 149Server version: 5.6.44-log MySQL Community Server (GPL)Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.mysql&gt; use mysql;Reading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedmysql&gt; update user set password=password=password(&apos;0301&apos;) where user=&apos;root&apos; and host=&apos;localhost&apos;;Query OK, 1 row affected (0.00 sec)Rows matched: 1 Changed: 1 Warnings: 0mysql&gt; flush priveleges;ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;priveleges&apos; at line 1mysql&gt; flush privileges;Query OK, 0 rows affected (0.00 sec)mysql&gt; 方法4： 关闭mysql 输入mysqld –skip-grant-tables 回车。–skip-grant-tables 的意思是启动MySQL服务的时候跳过权限表认证。 重新开启提个窗口 输入mysql回车，如果成功，将出现MySQL提示符 &gt;。 连接权限数据库： use mysql; 改密码：update user set password=password(“123”) where user=”root”;（别忘了最后加分号） 。 刷新权限（必须步骤）：flush privileges; 退出 quit]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql常见问题]]></title>
    <url>%2F2019%2F05%2F10%2Fmysql%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[1、mysqlbinlog命令报错 报错的原因是my.cnf中配置了default-character-ser=utf8,可以使用参数–no-defaluts参数来解决2、MySQL根据配置文件会限制Server接受的数据包大小。有时候大的插入和更新会受 max_allowed_packet 参数限制，导致大数据写入或者更新失败。show VARIABLES like &#39;max_allowed_packet&#39;;123456789mysql&gt; show VARIABLES like &apos;max_allowed_packet&apos;;+--------------------+---------+| Variable_name | Value |+--------------------+---------+| max_allowed_packet | 4194304 |+--------------------+---------+1 row in set (0.00 sec)mysql&gt; 3、查看数据目录show variables like &#39;%datadir%&#39;;123456789mysql&gt; show variables like &apos;%datadir%&apos;;+---------------+-----------------+| Variable_name | Value |+---------------+-----------------+| datadir | /var/lib/mysql/ |+---------------+-----------------+1 row in set (0.00 sec)mysql&gt; 4、查看binlog相关信息show variables like &#39;%log_bin%&#39;1234567891011121314mysql&gt; show variables like &apos;%log_bin%&apos;;+---------------------------------+--------------------------------+| Variable_name | Value |+---------------------------------+--------------------------------+| log_bin | ON || log_bin_basename | /var/lib/mysql/mysql-bin || log_bin_index | /var/lib/mysql/mysql-bin.index || log_bin_trust_function_creators | OFF || log_bin_use_v1_row_events | OFF || sql_log_bin | ON |+---------------------------------+--------------------------------+6 rows in set (0.00 sec)mysql&gt; 5、show processlist 是显示用户正在运行的线程，需要注意的是，除了 root 用户能看到所有正在运行的线程外，其他用户都只能看到自己正在运行的线程，看不到其它用户正在运行的线程。除非单独个这个用户赋予了PROCESS 权限。root用户，可以看到全部线程运行情况普通的activiti用户只能看到自己的123456789mysql&gt; show processlist;+-----+------+-----------+------+---------+------+-------+------------------+| Id | User | Host | db | Command | Time | State | Info |+-----+------+-----------+------+---------+------+-------+------------------+| 130 | root | localhost | NULL | Query | 0 | init | show processlist |+-----+------+-----------+------+---------+------+-------+------------------+1 row in set (0.00 sec)mysql&gt;]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql常见问题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TCP的三次握手与四次挥手]]></title>
    <url>%2F2019%2F05%2F07%2FTCP%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%2F</url>
    <content type="text"><![CDATA[1. TCP的几个标志位含义SYN：代表请求创建连接，所以在三次握手中前两次要SYN=1，表示这两次用于建立连接，至于第三次什么用，在疑问三里解答 FIN：表示请求关闭连接，在四次分手时，我们发现FIN发了两遍。这是因为TCP的连接是双向的，所以一次FIN只能关闭一个方向。 ACK：代表确认接受，不管是三次握手还是四次分手，在回应的时候都会加上ACK=1，表示消息接收到了，并且在建立连接以后的发送数据时，都需加上ACK=1,来表示数据接收成功。 seq:序列号，什么意思呢？当发送一个数据时，数据是被拆成多个数据包来发送，序列号就是对每个数据包进行编号，这样接受方才能对数据包进行再次拼接。 初始序列号是随机生成的，这样不一样的数据拆包解包就不会连接错了。（例如：两个数据都被拆成1，2，3和一个数据是1，2，3一个是101，102，103，很明显后者不会连接错误） ack:这个代表下一个数据包的编号，这也就是为什么第二请求时，ack是seq+1 2. TCP的三次握手过程 客户端首先要发送SYN=1，表示要建立连接 服务端接收到以后，告诉客户端：我接收到了！所以加个ACK=1，就变成了ACK=1,SYN=1 理论上这时就创建连接成功了，但是要防止一个意外（疑问三），所以客户端需要再发送一个消息给服务端确认下，这时候只需要ACK=1就行了 三次握手完成 3. TCP的三次挥手过程 首先客户端请求关闭客户端到服务器端方向的来连接，这时候客户端就要发送一个FIN=1,表示要关闭一个方向的连接（见上面四次挥手的图） 服务端接收到后需要确认一下的，所以返回了一个ACK=1 这时候只关闭了一个方向，另一个方向也需要关闭，所以服务器端也向客户端发送了一个FIN=1,ACK=1 客户端接收到后发送ACK=1，表示接受成功 四次挥手完成 4.总结seq是序列号，这是为了连接以后传送数据用的，ack是对收到的数据包的确认，值是等待接收的数据包的序列号。在第一次消息发送中，A随机选取一个序列号作为自己的初始序号发送给B；第二次消息B使用ack对A的数据包进行确认，因为已经收到了序列号为x的数据包，准备接收序列号为x+1的包，所以ack=x+1，同时B告诉A自己的初始序列号，就是seq=y；第三条消息A告诉B收到了B的确认消息并准备建立连接，A自己此条消息的序列号是x+1，所以seq=x+1，而ack=y+1是表示A正准备接收B序列号为y+1的数据包。 seq是数据包本身的序列号ack是期望对方继续发送的那个数据包的序列号]]></content>
      <categories>
        <category>网络协议</category>
      </categories>
      <tags>
        <tag>TCP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql之binlog详情与恢复数据]]></title>
    <url>%2F2019%2F05%2F06%2Fmysql%E4%B9%8Bbinlog%E8%AF%A6%E6%83%85%E4%B8%8E%E6%81%A2%E5%A4%8D%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[1、安装mysql数据库CentOS 7 版本将MySQL数据库软件从默认的程序列表中移除，用mariadb代替了 官网下载安装mysql 123wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpmrpm -ivh mysql-community-release-el7-5.noarch.rpmyum install mysql-community-server 安装成功后重启mysqlsystemctl restart mysql 初次安装，root账户没有密码 12345678910111213141516171819202122232425[root@10-46-143-76 ~]# mysql -uroot Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 2Server version: 5.6.44 MySQL Community Server (GPL)Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.mysql&gt; show databases;+--------------------+| Database |+--------------------+| information_schema || mysql || performance_schema |+--------------------+3 rows in set (0.00 sec)mysql&gt; set password for &apos;root&apos;@&apos;localhost&apos;=password(&apos;0301&apos;);Query OK, 0 rows affected (0.00 sec) 设置密码 1234mysql&gt; set password for &apos;root&apos;@&apos;localhost&apos; =password(&apos;password&apos;);Query OK, 0 rows affected (0.00 sec)mysql&gt; 不需要重启数据库即可生效2、简单了解binlogMySQL的二进制日志binlog可以说是MySQL最重要的日志，它记录了所有的DDL和DML语句（除了数据查询语句select），以事件形式记录，还包含语句所执行的消耗的时间，MySQL的二进制日志是事务安全型的 DDL Data Definition Language 数据库定义语言主要的命令有CREATE、ALTER、DROP等，DDL主要是用在定义或改变表（TABLE）的结构，数据类型，表之间的链接和约束等初始化工作上，他们大多在建立表时使用。 DML Data Manipulation Language 数据操纵语言主要的命令是SELECT、UPDATE、INSERT、DELETE，就象它的名字一样，这4条命令是用来对数据库里的数据进行操作的语言mysqlbinlog常见的选项有以下几个：–start-datetime：从二进制日志中读取指定等于时间戳或者晚于本地服务器的时间–stop-datetime：从二进制日志中读取指定小于时间戳或者等于本地服务器的时间 取值和上述一样–start-position：从二进制日志中读取指定position 事件位置作为开始。–stop-position：从二进制日志中读取指定position3、开启binlog 修改mysql配置文件vim /etc/my.cnf在[mysqld] 区块添加log-bin=mysql-bin 确认是打开状态(mysql-bin 是日志的基本名或前缀名)注意：每次服务器（数据库）重启，服务器会调用flush logs;，新创建一个binlog日志！ 重启mysqlsystemctl restart mysql 查看binlog日志是否开启1234567891011121314151617181920212223242526272829303132333435 [root@10-46-143-76 ~]# mysql -uroot -p0301Warning: Using a password on the command line interface can be insecure.Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 2Server version: 5.6.44-log MySQL Community Server (GPL)Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.mysql&gt; show variables like &apos;log_%&apos;;+----------------------------------------+--------------------------------+| Variable_name | Value |+----------------------------------------+--------------------------------+| log_bin | ON || log_bin_basename | /var/lib/mysql/mysql-bin || log_bin_index | /var/lib/mysql/mysql-bin.index || log_bin_trust_function_creators | OFF || log_bin_use_v1_row_events | OFF || log_error | /var/log/mysqld.log || log_output | FILE || log_queries_not_using_indexes | OFF || log_slave_updates | OFF || log_slow_admin_statements | OFF || log_slow_slave_statements | OFF || log_throttle_queries_not_using_indexes | 0 || log_warnings | 1 |+----------------------------------------+--------------------------------+13 rows in set (0.00 sec)mysql&gt; 4、创建新的数据库test123456789101112131415mysql&gt; create database test default charset utf8;Query OK, 1 row affected (0.01 sec)mysql&gt; show databases;+--------------------+| Database |+--------------------+| information_schema || mysql || performance_schema || test |+--------------------+4 rows in set (0.00 sec)mysql&gt; use test;Database changedmysql&gt; 5、创建新的表12345678910mysql&gt; create table test_test(id int(4));Query OK, 0 rows affected (0.01 sec)mysql&gt; show tables;+----------------+| Tables_in_test |+----------------+| test_test |+----------------+1 row in set (0.00 sec) 6、向表中插入数据1234567891011121314mysql&gt; insert into test_test values(1);Query OK, 1 row affected (0.00 sec)mysql&gt; insert into test_test values(2);Query OK, 1 row affected (0.00 sec)mysql&gt; select id from test_test;+------+| id |+------+| 1 || 2 |+------+2 rows in set (0.01 sec) 7、刷新mysqlbin日志此时mysql的binlog日志文件中只有一个mysql-bin.000001,如下：1234567mysql&gt; show master logs;+------------------+-----------+| Log_name | File_size |+------------------+-----------+| mysql-bin.000001 | 775 |+------------------+-----------+1 row in set (0.00 sec) 123456789101112[root@10-46-143-76 ~]# ll /var/lib/mysql/total 110612-rw-rw---- 1 mysql mysql 56 May 6 22:36 auto.cnf-rw-rw---- 1 mysql mysql 12582912 May 6 23:16 ibdata1-rw-rw---- 1 mysql mysql 50331648 May 6 23:16 ib_logfile0-rw-rw---- 1 mysql mysql 50331648 May 6 22:35 ib_logfile1drwx------ 2 mysql mysql 4096 May 6 22:35 mysql-rw-rw---- 1 mysql mysql 775 May 6 23:16 mysql-bin.000001-rw-rw---- 1 mysql mysql 19 May 6 22:58 mysql-bin.indexsrwxrwxrwx 1 mysql mysql 0 May 6 22:58 mysql.sockdrwx------ 2 mysql mysql 4096 May 6 22:35 performance_schemadrwx------ 2 mysql mysql 62 May 6 23:14 test 注意：此时mysql的binlog文件为mysql-bin.000001,并且数据库中只有1，2两条数据。如下：12345678mysql&gt; select id from test_test;+------+| id |+------+| 1 || 2 |+------+2 rows in set (0.01 sec) 现在我们来刷新binlog日志，生成新的binlog日志文件mysql-bin.000002，如下：1234567891011mysql&gt; flush logs;Query OK, 0 rows affected (0.01 sec)mysql&gt; show master logs;+------------------+-----------+| Log_name | File_size |+------------------+-----------+| mysql-bin.000001 | 822 || mysql-bin.000002 | 120 |+------------------+-----------+2 rows in set (0.00 sec) 1234567891011121314[root@10-46-143-76 ~]# ll /var/lib/mysql/total 110616-rw-rw---- 1 mysql mysql 56 May 6 22:36 auto.cnf-rw-rw---- 1 mysql mysql 12582912 May 6 23:16 ibdata1-rw-rw---- 1 mysql mysql 50331648 May 6 23:16 ib_logfile0-rw-rw---- 1 mysql mysql 50331648 May 6 22:35 ib_logfile1drwx------ 2 mysql mysql 4096 May 6 22:35 mysql-rw-rw---- 1 mysql mysql 822 May 6 23:25 mysql-bin.000001-rw-rw---- 1 mysql mysql 120 May 6 23:25 mysql-bin.000002-rw-rw---- 1 mysql mysql 38 May 6 23:25 mysql-bin.indexsrwxrwxrwx 1 mysql mysql 0 May 6 22:58 mysql.sockdrwx------ 2 mysql mysql 4096 May 6 22:35 performance_schemadrwx------ 2 mysql mysql 62 May 6 23:14 test[root@10-46-143-76 ~]# 现在我们再向表中插入3、4两条数据12345678910111213141516mysql&gt; insert into test_test values(3);Query OK, 1 row affected (0.01 sec)mysql&gt; insert into test_test values(4);Query OK, 1 row affected (0.00 sec)mysql&gt; select id from test_test;+------+| id |+------+| 1 || 2 || 3 || 4 |+------+4 rows in set (0.00 sec) 数据3、4插入完毕后，我们再次刷新binlog日志，生成新的binlog日志文件为mysql-bin.000003，如下：123456789101112mysql&gt; flush logs;Query OK, 0 rows affected (0.00 sec)mysql&gt; show master logs;+------------------+-----------+| Log_name | File_size |+------------------+-----------+| mysql-bin.000001 | 822 || mysql-bin.000002 | 599 || mysql-bin.000003 | 120 |+------------------+-----------+3 rows in set (0.00 sec) 1234567891011121314[root@10-46-143-76 ~]# ll /var/lib/mysql/total 110620-rw-rw---- 1 mysql mysql 56 May 6 22:36 auto.cnf-rw-rw---- 1 mysql mysql 12582912 May 6 23:28 ibdata1-rw-rw---- 1 mysql mysql 50331648 May 6 23:28 ib_logfile0-rw-rw---- 1 mysql mysql 50331648 May 6 22:35 ib_logfile1drwx------ 2 mysql mysql 4096 May 6 22:35 mysql-rw-rw---- 1 mysql mysql 822 May 6 23:25 mysql-bin.000001-rw-rw---- 1 mysql mysql 599 May 6 23:30 mysql-bin.000002-rw-rw---- 1 mysql mysql 120 May 6 23:30 mysql-bin.000003-rw-rw---- 1 mysql mysql 57 May 6 23:30 mysql-bin.indexsrwxrwxrwx 1 mysql mysql 0 May 6 22:58 mysql.sockdrwx------ 2 mysql mysql 4096 May 6 22:35 performance_schemadrwx------ 2 mysql mysql 62 May 6 23:14 test 现在我们总共有三个binlog日志文件：mysql-bin.000001、mysql-bin.000002、mysql-bin.000003。其中在mysql-bin.000001中，我们向test_test表中插入两个数据1、2。在mysql-bin.000002中我们向test_test表中插入两个数据3、41234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465[root@10-46-143-76 ~]# /usr/bin/mysqlbinlog /var/lib/mysql/mysql-bin.000001 /*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/;/*!40019 SET @@session.max_insert_delayed_threads=0*/;/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;DELIMITER /*!*/;# at 4#190506 22:58:41 server id 1 end_log_pos 120 CRC32 0xba17a662 Start: binlog v 4, server v 5.6.44-log created 190506 22:58:41 at startupROLLBACK/*!*/;BINLOG &apos;oUvQXA8BAAAAdAAAAHgAAAAAAAQANS42LjQ0LWxvZwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAChS9BcEzgNAAgAEgAEBAQEEgAAXAAEGggAAAAICAgCAAAACgoKGRkAAWKmF7o=&apos;/*!*/;# at 120#190506 23:07:36 server id 1 end_log_pos 235 CRC32 0xe64de19f Query thread_id=3 exec_time=0 error_code=0SET TIMESTAMP=1557155256/*!*/;SET @@session.pseudo_thread_id=3/*!*/;SET @@session.foreign_key_checks=1, @@session.sql_auto_is_null=0, @@session.unique_checks=1, @@session.autocommit=1/*!*/;SET @@session.sql_mode=1075838976/*!*/;SET @@session.auto_increment_increment=1, @@session.auto_increment_offset=1/*!*/;/*!\C utf8 *//*!*/;SET @@session.character_set_client=33,@@session.collation_connection=33,@@session.collation_server=8/*!*/;SET @@session.lc_time_names=0/*!*/;SET @@session.collation_database=DEFAULT/*!*/;create database test default charset utf8/*!*/;# at 235#190506 23:14:43 server id 1 end_log_pos 343 CRC32 0x75940a84 Query thread_id=3 exec_time=0 error_code=0use `test`/*!*/;SET TIMESTAMP=1557155683/*!*/;create table test_test(id int(4))/*!*/;# at 343#190506 23:16:17 server id 1 end_log_pos 422 CRC32 0xe1b2ec7f Query thread_id=3 exec_time=0 error_code=0SET TIMESTAMP=1557155777/*!*/;BEGIN/*!*/;# at 422#190506 23:16:17 server id 1 end_log_pos 528 CRC32 0x712307cf Query thread_id=3 exec_time=0 error_code=0SET TIMESTAMP=1557155777/*!*/;insert into test_test values(1)/*!*/;# at 528#190506 23:16:17 server id 1 end_log_pos 559 CRC32 0x6ae17c29 Xid = 19COMMIT/*!*/;# at 559#190506 23:16:24 server id 1 end_log_pos 638 CRC32 0x49295b87 Query thread_id=3 exec_time=0 error_code=0SET TIMESTAMP=1557155784/*!*/;BEGIN/*!*/;# at 638#190506 23:16:24 server id 1 end_log_pos 744 CRC32 0xad658998 Query thread_id=3 exec_time=0 error_code=0SET TIMESTAMP=1557155784/*!*/;insert into test_test values(2)/*!*/;# at 744#190506 23:16:24 server id 1 end_log_pos 775 CRC32 0xef810790 Xid = 20COMMIT/*!*/;# at 775#190506 23:25:38 server id 1 end_log_pos 822 CRC32 0x68fa5169 Rotate to mysql-bin.000002 pos: 4DELIMITER ;# End of log fileROLLBACK /* added by mysqlbinlog */;/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354[root@10-46-143-76 ~]# /usr/bin/mysqlbinlog /var/lib/mysql/mysql-bin.000002/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/;/*!40019 SET @@session.max_insert_delayed_threads=0*/;/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;DELIMITER /*!*/;# at 4#190506 23:25:38 server id 1 end_log_pos 120 CRC32 0x47d99eba Start: binlog v 4, server v 5.6.44-log created 190506 23:25:38BINLOG &apos;8lHQXA8BAAAAdAAAAHgAAAAAAAQANS42LjQ0LWxvZwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEzgNAAgAEgAEBAQEEgAAXAAEGggAAAAICAgCAAAACgoKGRkAAbqe2Uc=&apos;/*!*/;# at 120#190506 23:28:36 server id 1 end_log_pos 199 CRC32 0x7db4b53f Query thread_id=3 exec_time=0 error_code=0SET TIMESTAMP=1557156516/*!*/;SET @@session.pseudo_thread_id=3/*!*/;SET @@session.foreign_key_checks=1, @@session.sql_auto_is_null=0, @@session.unique_checks=1, @@session.autocommit=1/*!*/;SET @@session.sql_mode=1075838976/*!*/;SET @@session.auto_increment_increment=1, @@session.auto_increment_offset=1/*!*/;/*!\C utf8 *//*!*/;SET @@session.character_set_client=33,@@session.collation_connection=33,@@session.collation_server=8/*!*/;SET @@session.lc_time_names=0/*!*/;SET @@session.collation_database=DEFAULT/*!*/;BEGIN/*!*/;# at 199#190506 23:28:36 server id 1 end_log_pos 305 CRC32 0x13afbe9c Query thread_id=3 exec_time=0 error_code=0use `test`/*!*/;SET TIMESTAMP=1557156516/*!*/;insert into test_test values(3)/*!*/;# at 305#190506 23:28:36 server id 1 end_log_pos 336 CRC32 0xd965c0aa Xid = 25COMMIT/*!*/;# at 336#190506 23:28:40 server id 1 end_log_pos 415 CRC32 0x462c686d Query thread_id=3 exec_time=0 error_code=0SET TIMESTAMP=1557156520/*!*/;BEGIN/*!*/;# at 415#190506 23:28:40 server id 1 end_log_pos 521 CRC32 0xf6656ce4 Query thread_id=3 exec_time=0 error_code=0SET TIMESTAMP=1557156520/*!*/;insert into test_test values(4)/*!*/;# at 521#190506 23:28:40 server id 1 end_log_pos 552 CRC32 0x90d5bb3b Xid = 26COMMIT/*!*/;# at 552#190506 23:30:20 server id 1 end_log_pos 599 CRC32 0x8ca4ff34 Rotate to mysql-bin.000003 pos: 4DELIMITER ;# End of log fileROLLBACK /* added by mysqlbinlog */;/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/; 8、完整备份ailanni数据库mysqldump -uroot -p test | gzip &gt; back_date +%F.tar.gzmysqldump -uroot -p test &gt; back_date +%F.sql查看备份与test数据库内容一致，如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950[root@10-46-143-76 ~]# cat back_2019-05-06.sql -- MySQL dump 10.13 Distrib 5.6.44, for Linux (x86_64)---- Host: localhost Database: test-- -------------------------------------------------------- Server version 5.6.44-log/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;/*!40101 SET NAMES utf8 */;/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;/*!40103 SET TIME_ZONE=&apos;+00:00&apos; */;/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&apos;NO_AUTO_VALUE_ON_ZERO&apos; */;/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;---- Table structure for table `test_test`--DROP TABLE IF EXISTS `test_test`;/*!40101 SET @saved_cs_client = @@character_set_client */;/*!40101 SET character_set_client = utf8 */;CREATE TABLE `test_test` ( `id` int(4) DEFAULT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8;/*!40101 SET character_set_client = @saved_cs_client */;---- Dumping data for table `test_test`--LOCK TABLES `test_test` WRITE;/*!40000 ALTER TABLE `test_test` DISABLE KEYS */;INSERT INTO `test_test` VALUES (1),(2),(3),(4);/*!40000 ALTER TABLE `test_test` ENABLE KEYS */;UNLOCK TABLES;/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;-- Dump completed on 2019-05-06 23:45:37 、删除表test_test插入的部分数据在第三、四步中，我们向表ilannitable中插入了1、2、3、4四个数据。为了模拟在test数据库被破坏后的实际情形，我们现在把test数据库中的3这条数据给删除，如下：123456789101112mysql&gt; delete from test_test where id=3;Query OK, 1 row affected (0.00 sec)mysql&gt; select id from test_test;+------+| id |+------+| 1 || 2 || 4 |+------+3 rows in set (0.00 sec) 此时我们再次刷新binlog日志，生成新的binlog日志文件为mysql-bin.000004，如下：12345678910111213mysql&gt; flush logs;Query OK, 0 rows affected (0.01 sec)mysql&gt; show master logs;+------------------+-----------+| Log_name | File_size |+------------------+-----------+| mysql-bin.000001 | 822 || mysql-bin.000002 | 599 || mysql-bin.000003 | 383 || mysql-bin.000004 | 120 |+------------------+-----------+4 rows in set (0.00 sec) 10、删除数据库test上步中我们删除了数据记录3，现在我们来删除数据库test，如下：123456789101112mysql&gt; drop database test;Query OK, 1 row affected (0.01 sec)mysql&gt; show databases;+--------------------+| Database |+--------------------+| information_schema || mysql || performance_schema |+--------------------+3 rows in set (0.01 sec) 删除完毕后，我们再次刷新binlog日志，生成新的binlog日志文件为mysql-bin.000005，如下：1234567891011121314mysql&gt; flush logs;Query OK, 0 rows affected (0.01 sec)mysql&gt; show master logs;+------------------+-----------+| Log_name | File_size |+------------------+-----------+| mysql-bin.000001 | 822 || mysql-bin.000002 | 599 || mysql-bin.000003 | 383 || mysql-bin.000004 | 259 || mysql-bin.000005 | 120 |+------------------+-----------+5 rows in set (0.01 sec) 11、 各个binlog日志的内容解析现在mysql的binlog日志文件有5个，从mysql-bin.000001到mysql-bin.000005，其中在mysql-bin.000001中我们向iltest_test表中插入了1、2两条数据。 在mysql-bin.000002中我们向test表中插入了3、4两条数据，在mysql-bin.000003中我们从表ilannitabletest_test删除了3这条数据。在mysql-bin.000004中我们把ailanni数据库给删除了。各个binlog日志的SQL操作语句，如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130/usr/bin/mysqlbinlog /var/lib/mysql/mysql-bin.000001 /*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/;/*!40019 SET @@session.max_insert_delayed_threads=0*/;/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;DELIMITER /*!*/;# at 4#190506 22:58:41 server id 1 end_log_pos 120 CRC32 0xba17a662 Start: binlog v 4, server v 5.6.44-log created 190506 22:58:41 at startupROLLBACK/*!*/;BINLOG &apos;oUvQXA8BAAAAdAAAAHgAAAAAAAQANS42LjQ0LWxvZwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAChS9BcEzgNAAgAEgAEBAQEEgAAXAAEGggAAAAICAgCAAAACgoKGRkAAWKmF7o=&apos;/*!*/;# at 120#190506 23:07:36 server id 1 end_log_pos 235 CRC32 0xe64de19f Query thread_id=3 exec_time=0 error_code=0SET TIMESTAMP=1557155256/*!*/;SET @@session.pseudo_thread_id=3/*!*/;SET @@session.foreign_key_checks=1, @@session.sql_auto_is_null=0, @@session.unique_checks=1, @@session.autocommit=1/*!*/;SET @@session.sql_mode=1075838976/*!*/;SET @@session.auto_increment_increment=1, @@session.auto_increment_offset=1/*!*/;/*!\C utf8 *//*!*/;SET @@session.character_set_client=33,@@session.collation_connection=33,@@session.collation_server=8/*!*/;SET @@session.lc_time_names=0/*!*/;SET @@session.collation_database=DEFAULT/*!*/;create database test default charset utf8/*!*/;# at 235#190506 23:14:43 server id 1 end_log_pos 343 CRC32 0x75940a84 Query thread_id=3 exec_time=0 error_code=0use `test`/*!*/;SET TIMESTAMP=1557155683/*!*/;create table test_test(id int(4))/*!*/;# at 343#190506 23:16:17 server id 1 end_log_pos 422 CRC32 0xe1b2ec7f Query thread_id=3 exec_time=0 error_code=0SET TIMESTAMP=1557155777/*!*/;BEGIN/*!*/;# at 422#190506 23:16:17 server id 1 end_log_pos 528 CRC32 0x712307cf Query thread_id=3 exec_time=0 error_code=0SET TIMESTAMP=1557155777/*!*/;insert into test_test values(1)/*!*/;# at 528#190506 23:16:17 server id 1 end_log_pos 559 CRC32 0x6ae17c29 Xid = 19COMMIT/*!*/;# at 559#190506 23:16:24 server id 1 end_log_pos 638 CRC32 0x49295b87 Query thread_id=3 exec_time=0 error_code=0SET TIMESTAMP=1557155784/*!*/;BEGIN/*!*/;# at 638#190506 23:16:24 server id 1 end_log_pos 744 CRC32 0xad658998 Query thread_id=3 exec_time=0 error_code=0SET TIMESTAMP=1557155784/*!*/;insert into test_test values(2)/*!*/;# at 744#190506 23:16:24 server id 1 end_log_pos 775 CRC32 0xef810790 Xid = 20COMMIT/*!*/;# at 775#190506 23:25:38 server id 1 end_log_pos 822 CRC32 0x68fa5169 Rotate to mysql-bin.000002 pos: 4DELIMITER ;# End of log fileROLLBACK /* added by mysqlbinlog */;/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/;[root@10-46-143-76 ~]# /usr/bin/mysqlbinlog /var/lib/mysql/mysql-bin.000001 /*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/;/*!40019 SET @@session.max_insert_delayed_threads=0*/;/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;DELIMITER /*!*/;# at 4#190506 22:58:41 server id 1 end_log_pos 120 CRC32 0xba17a662 Start: binlog v 4, server v 5.6.44-log created 190506 22:58:41 at startupROLLBACK/*!*/;BINLOG &apos;oUvQXA8BAAAAdAAAAHgAAAAAAAQANS42LjQ0LWxvZwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAChS9BcEzgNAAgAEgAEBAQEEgAAXAAEGggAAAAICAgCAAAACgoKGRkAAWKmF7o=&apos;/*!*/;# at 120#190506 23:07:36 server id 1 end_log_pos 235 CRC32 0xe64de19f Query thread_id=3 exec_time=0 error_code=0SET TIMESTAMP=1557155256/*!*/;SET @@session.pseudo_thread_id=3/*!*/;SET @@session.foreign_key_checks=1, @@session.sql_auto_is_null=0, @@session.unique_checks=1, @@session.autocommit=1/*!*/;SET @@session.sql_mode=1075838976/*!*/;SET @@session.auto_increment_increment=1, @@session.auto_increment_offset=1/*!*/;/*!\C utf8 *//*!*/;SET @@session.character_set_client=33,@@session.collation_connection=33,@@session.collation_server=8/*!*/;SET @@session.lc_time_names=0/*!*/;SET @@session.collation_database=DEFAULT/*!*/;create database test default charset utf8/*!*/;# at 235#190506 23:14:43 server id 1 end_log_pos 343 CRC32 0x75940a84 Query thread_id=3 exec_time=0 error_code=0use `test`/*!*/;SET TIMESTAMP=1557155683/*!*/;create table test_test(id int(4))/*!*/;# at 343#190506 23:16:17 server id 1 end_log_pos 422 CRC32 0xe1b2ec7f Query thread_id=3 exec_time=0 error_code=0SET TIMESTAMP=1557155777/*!*/;BEGIN/*!*/;# at 422#190506 23:16:17 server id 1 end_log_pos 528 CRC32 0x712307cf Query thread_id=3 exec_time=0 error_code=0SET TIMESTAMP=1557155777/*!*/;insert into test_test values(1)/*!*/;# at 528#190506 23:16:17 server id 1 end_log_pos 559 CRC32 0x6ae17c29 Xid = 19COMMIT/*!*/;# at 559#190506 23:16:24 server id 1 end_log_pos 638 CRC32 0x49295b87 Query thread_id=3 exec_time=0 error_code=0SET TIMESTAMP=1557155784/*!*/;BEGIN/*!*/;# at 638#190506 23:16:24 server id 1 end_log_pos 744 CRC32 0xad658998 Query thread_id=3 exec_time=0 error_code=0SET TIMESTAMP=1557155784/*!*/;insert into test_test values(2)/*!*/;# at 744#190506 23:16:24 server id 1 end_log_pos 775 CRC32 0xef810790 Xid = 20COMMIT/*!*/;# at 775#190506 23:25:38 server id 1 end_log_pos 822 CRC32 0x68fa5169 Rotate to mysql-bin.000002 pos: 4DELIMITER ;# End of log fileROLLBACK /* added by mysqlbinlog */;/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354[root@10-46-143-76 ~]# /usr/bin/mysqlbinlog /var/lib/mysql/mysql-bin.000002/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/;/*!40019 SET @@session.max_insert_delayed_threads=0*/;/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;DELIMITER /*!*/;# at 4#190506 23:25:38 server id 1 end_log_pos 120 CRC32 0x47d99eba Start: binlog v 4, server v 5.6.44-log created 190506 23:25:38BINLOG &apos;8lHQXA8BAAAAdAAAAHgAAAAAAAQANS42LjQ0LWxvZwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEzgNAAgAEgAEBAQEEgAAXAAEGggAAAAICAgCAAAACgoKGRkAAbqe2Uc=&apos;/*!*/;# at 120#190506 23:28:36 server id 1 end_log_pos 199 CRC32 0x7db4b53f Query thread_id=3 exec_time=0 error_code=0SET TIMESTAMP=1557156516/*!*/;SET @@session.pseudo_thread_id=3/*!*/;SET @@session.foreign_key_checks=1, @@session.sql_auto_is_null=0, @@session.unique_checks=1, @@session.autocommit=1/*!*/;SET @@session.sql_mode=1075838976/*!*/;SET @@session.auto_increment_increment=1, @@session.auto_increment_offset=1/*!*/;/*!\C utf8 *//*!*/;SET @@session.character_set_client=33,@@session.collation_connection=33,@@session.collation_server=8/*!*/;SET @@session.lc_time_names=0/*!*/;SET @@session.collation_database=DEFAULT/*!*/;BEGIN/*!*/;# at 199#190506 23:28:36 server id 1 end_log_pos 305 CRC32 0x13afbe9c Query thread_id=3 exec_time=0 error_code=0use `test`/*!*/;SET TIMESTAMP=1557156516/*!*/;insert into test_test values(3)/*!*/;# at 305#190506 23:28:36 server id 1 end_log_pos 336 CRC32 0xd965c0aa Xid = 25COMMIT/*!*/;# at 336#190506 23:28:40 server id 1 end_log_pos 415 CRC32 0x462c686d Query thread_id=3 exec_time=0 error_code=0SET TIMESTAMP=1557156520/*!*/;BEGIN/*!*/;# at 415#190506 23:28:40 server id 1 end_log_pos 521 CRC32 0xf6656ce4 Query thread_id=3 exec_time=0 error_code=0SET TIMESTAMP=1557156520/*!*/;insert into test_test values(4)/*!*/;# at 521#190506 23:28:40 server id 1 end_log_pos 552 CRC32 0x90d5bb3b Xid = 26COMMIT/*!*/;# at 552#190506 23:30:20 server id 1 end_log_pos 599 CRC32 0x8ca4ff34 Rotate to mysql-bin.000003 pos: 4DELIMITER ;# End of log fileROLLBACK /* added by mysqlbinlog */;/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/; 1234567891011121314151617181920212223242526272829303132333435363738394041[root@10-46-143-76 ~]# /usr/bin/mysqlbinlog /var/lib/mysql/mysql-bin.000003/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/;/*!40019 SET @@session.max_insert_delayed_threads=0*/;/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;DELIMITER /*!*/;# at 4#190506 23:30:20 server id 1 end_log_pos 120 CRC32 0xe2ef5617 Start: binlog v 4, server v 5.6.44-log created 190506 23:30:20BINLOG &apos;DFPQXA8BAAAAdAAAAHgAAAAAAAQANS42LjQ0LWxvZwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEzgNAAgAEgAEBAQEEgAAXAAEGggAAAAICAgCAAAACgoKGRkAARdW7+I=&apos;/*!*/;# at 120#190506 23:50:17 server id 1 end_log_pos 199 CRC32 0x40c66094 Query thread_id=3 exec_time=0 error_code=0SET TIMESTAMP=1557157817/*!*/;SET @@session.pseudo_thread_id=3/*!*/;SET @@session.foreign_key_checks=1, @@session.sql_auto_is_null=0, @@session.unique_checks=1, @@session.autocommit=1/*!*/;SET @@session.sql_mode=1075838976/*!*/;SET @@session.auto_increment_increment=1, @@session.auto_increment_offset=1/*!*/;/*!\C utf8 *//*!*/;SET @@session.character_set_client=33,@@session.collation_connection=33,@@session.collation_server=8/*!*/;SET @@session.lc_time_names=0/*!*/;SET @@session.collation_database=DEFAULT/*!*/;BEGIN/*!*/;# at 199#190506 23:50:17 server id 1 end_log_pos 305 CRC32 0x54833004 Query thread_id=3 exec_time=0 error_code=0use `test`/*!*/;SET TIMESTAMP=1557157817/*!*/;delete from test_test where id=3/*!*/;# at 305#190506 23:50:17 server id 1 end_log_pos 336 CRC32 0xcc394852 Xid = 116COMMIT/*!*/;# at 336#190506 23:51:26 server id 1 end_log_pos 383 CRC32 0xb9043b04 Rotate to mysql-bin.000004 pos: 4DELIMITER ;# End of log fileROLLBACK /* added by mysqlbinlog */;/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/; 1234567891011121314151617181920212223242526272829303132[root@10-46-143-76 ~]# /usr/bin/mysqlbinlog /var/lib/mysql/mysql-bin.000004/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/;/*!40019 SET @@session.max_insert_delayed_threads=0*/;/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;DELIMITER /*!*/;# at 4#190506 23:51:26 server id 1 end_log_pos 120 CRC32 0x15ed3699 Start: binlog v 4, server v 5.6.44-log created 190506 23:51:26BINLOG &apos;/lfQXA8BAAAAdAAAAHgAAAAAAAQANS42LjQ0LWxvZwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEzgNAAgAEgAEBAQEEgAAXAAEGggAAAAICAgCAAAACgoKGRkAAZk27RU=&apos;/*!*/;# at 120#190506 23:53:16 server id 1 end_log_pos 212 CRC32 0xc1f4ea3d Query thread_id=3 exec_time=0 error_code=0SET TIMESTAMP=1557157996/*!*/;SET @@session.pseudo_thread_id=3/*!*/;SET @@session.foreign_key_checks=1, @@session.sql_auto_is_null=0, @@session.unique_checks=1, @@session.autocommit=1/*!*/;SET @@session.sql_mode=1075838976/*!*/;SET @@session.auto_increment_increment=1, @@session.auto_increment_offset=1/*!*/;/*!\C utf8 *//*!*/;SET @@session.character_set_client=33,@@session.collation_connection=33,@@session.collation_server=8/*!*/;SET @@session.lc_time_names=0/*!*/;SET @@session.collation_database=DEFAULT/*!*/;drop database test/*!*/;# at 212#190506 23:53:55 server id 1 end_log_pos 259 CRC32 0xc9420b38 Rotate to mysql-bin.000005 pos: 4DELIMITER ;# End of log fileROLLBACK /* added by mysqlbinlog */;/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/; 12、恢复全部数据现在我们要恢复test数据库，在此首先有关test数据库是否存在的情况要说明下。如果目前mysql数据库服务器上有test这个数据库，那么我们在恢复数据时，就不需要重新创建test数据库。如果目前mysql数据库服务器上没有test这个数据库，那么我们就需要重新创建一个空的test数据库。即该数据库只是一个空的库，里面没有任何表或者其他的元素。如果不创建test数据库的话，我们在通过mysql命令恢复数据库时，系统就会报错，如下：123[root@10-46-143-76 ~]# mysql -uroot -p test &lt;back_2019-05-06.sql Enter password: ERROR 1049 (42000): Unknown database &apos;test&apos; 123456789101112131415161718192021222324252627282930313233[root@10-46-143-76 ~]# mysql -uroot -p -e &apos;create database test default charset utf8;&apos;Enter password: [root@10-46-143-76 ~]# mysql -uroot -p test &lt;back_2019-05-06.sql Enter password: [root@10-46-143-76 ~]# mysql -uroot -p Enter password: Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 13Server version: 5.6.44-log MySQL Community Server (GPL)Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.mysql&gt; use test;Reading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedmysql&gt; select id from test_test;+------+| id |+------+| 1 || 2 || 3 || 4 |+------+4 rows in set (0.00 sec) 我们可以看出，目前test数据库已全部被恢复，而且数据一个也没丢失。12、恢复test数据库指定的部分在通过mysql的binlog日志恢复数据库时，我们可以指定数据库恢复的位置、恢复的时间，同时也可以不指定数据库恢复的位置和时间。现在我们要求把数据库恢复到删除数据记录3时的状态。即数据库只有1、2、4这三条数据1234567891011121314151617181920212223242526272829303132[root@10-46-143-76 ~]# mysqlbinlog /var/lib/mysql/mysql-bin.000003 |mysql -uroot -pEnter password: [root@10-46-143-76 ~]# mysql -uroot -pEnter password: Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 34Server version: 5.6.44-log MySQL Community Server (GPL)Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.mysql&gt; use test;Reading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedmysql&gt; select id from test_test;+------+| id |+------+| 1 || 2 || 4 |+------+3 rows in set (0.00 sec)mysql&gt; 通过上图我们可以看到此时数据库test已经恢复到删除数据3时的状态了，test数据库中确实只有1、2、4，这三条数据。这样也达到我们的要求了。重要说明：通过上面的文章，我们知道现在ailanni数据库的情况是，已经恢复全部数据。为了继续做下面的实验，我们需要把数据库恢复到还没有进行完全备份之前的状态，数据库还没有数据的状态，我们需要做的是清空现在的test数据库，保持test是一个空的数据库。但是test的数据库的表结构，主键，外键等等信息都是完整的。同时还要注意，如果在同一个时间点，binlog中有执行过多条sql语句的话，那么我们在恢复数据库的时候，一定要根据pos节点的位置来恢复数据，切记切记。因为此时在binlog日志中，时间节点是一样的，但是pos位置节点是唯一的1234567mysql&gt; delete from test_test;Query OK, 3 rows affected (0.01 sec)mysql&gt; select id from test_test;Empty set (0.00 sec)mysql&gt; 13、指定时间来恢复数据库要恢复到删除3的状态，首先必须保证此时数据库中的数据已经存在3的数据，即先恢复mysql-bin.000001和mysql-bin.000002的状态！比如：我直接不恢复mysql-bin.000001的数据，直接恢复mysql-bin.000002的数据，则只会恢复3，4的数据，如下：1234567891011121314151617181920212223242526272829[root@10-46-143-76 ~]# mysqlbinlog /var/lib/mysql/mysql-bin.000002 |mysql -uroot -pEnter password: [root@10-46-143-76 ~]# mysql -uroot -pEnter password: Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 51Server version: 5.6.44-log MySQL Community Server (GPL)Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.mysql&gt; use test;Reading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedmysql&gt; select id from test_test;+------+| id |+------+| 3 || 4 |+------+2 rows in set (0.00 sec) 此时再恢复mysql-bin.000001123[root@10-46-143-76 ~]# mysqlbinlog /var/lib/mysql/mysql-bin.000001 |mysql -uroot -pEnter password: ERROR 1007 (HY000) at line 24: Can&apos;t create database &apos;test&apos;; database exists 123456789101112131415161718192021222324252627282930313233343536[root@10-46-143-76 ~]# mysqlbinlog /var/lib/mysql/mysql-bin.000001 |mysql -uroot -pEnter password: [root@10-46-143-76 ~]# mysqlbinlog /var/lib/mysql/mysql-bin.000002 |mysql -uroot -pEnter password: [root@10-46-143-76 ~]# mysqlbinlog /var/lib/mysql/mysql-bin.000003 --stop-datetime=&apos;2019-05-06 23:51:26&apos;|mysql -uroot -pEnter password: [root@10-46-143-76 ~]# mysql -uroot -pEnter password: Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 57Server version: 5.6.44-log MySQL Community Server (GPL)Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.mysql&gt; use test;Reading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedmysql&gt; select id from test_test;+------+| id |+------+| 1 || 2 || 4 |+------+3 rows in set (0.00 sec)mysql&gt; 要求把数据库ailanni恢复到插入数据3后，未插入数据4时的状态。即数据库ailanni中只有数据1、2、3，这三条数据此时数据库中有1，2，4三条数据，直接进行节点还原则会出现如下情况：1234567891011121314151617181920212223242526272829303132[root@10-46-143-76 ~]# mysqlbinlog /var/lib/mysql/mysql-bin.000002 --stop-position=336 |mysql -uroot -p[root@10-46-143-76 ~]# mysql -uroot -pEnter password: Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 60Server version: 5.6.44-log MySQL Community Server (GPL)Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.mysql&gt; use test;Reading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedmysql&gt; select id from test_test;+------+| id |+------+| 1 || 2 || 4 || 3 |+------+4 rows in set (0.00 sec)mysql&gt; 所以要还原到只有插入数据3的位置，必须先从空库mysql-bin.000001因为mysql-bin.000001中记录了建库语句，所以只需要如下操作：12345678910111213141516171819202122232425262728293031323334353637[root@10-46-143-76 ~]# mysqlbinlog /var/lib/mysql/mysql-bin.000001 |mysql -uroot -pEnter password: [root@10-46-143-76 ~]# mysqlbinlog /var/lib/mysql/mysql-bin.000002 --stop-position=336 |mysql -uroot -pEnter password: [root@10-46-143-76 ~]# mysql -uroot -pEnter password: ERROR 1045 (28000): Access denied for user &apos;root&apos;@&apos;localhost&apos; (using password: YES)[root@10-46-143-76 ~]# mysql -uroot -pEnter password: Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 69Server version: 5.6.44-log MySQL Community Server (GPL)Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.mysql&gt; use test;Reading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedmysql&gt; select id from test_test;+------+| id |+------+| 1 || 2 || 3 |+------+3 rows in set (0.00 sec)mysql&gt;]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sed基本用法]]></title>
    <url>%2F2019%2F05%2F05%2Fsed%E5%91%BD%E4%BB%A4%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95%2F</url>
    <content type="text"><![CDATA[sed在文件中查询文本的基本方法：n和p命令一起使用表示只打印那些发生替换的行 1.使用行号，可以是一个简单数字，或是一个行号范围符号 |作用 | :-: |x | x为行号|x,y | 表示行号从x到y/pattern | 表示包含模式的行/pattern /pattern | 表示包含两个模式的行pattern/,x | 在给定行号上查询包含模式的行x，/pattern | 通过行号和模式查询匹配的行x,y! | 查询包含指定行号x和y的行12345[root@10-46-143-76 ~]# cat dataThis is the header data lineThis is the first data lineThis is the second data lineThis is the last data line 打印文中的第几行，第行会打印两遍，sed默认打印文中的所有行123456[root@10-46-143-76 ~]# sed &apos;2p&apos; dataThis is the header data lineThis is the first data lineThis is the first data lineThis is the second data lineThis is the last data line sed用-n选项，表示只打印匹配的行12[root@10-46-143-76 ~]# sed -n &apos;2p&apos; dataThis is the first data line 1234[root@10-46-143-76 ~]# sed -n &apos;1,3p&apos; data 表示打印文中第一行到第三行This is the header data lineThis is the first data lineThis is the second data line 12[root@10-46-143-76 ~]# sed -n &apos;/second/p&apos; data 表示打印文件中匹配second的行This is the second data line 打印文中从匹配到/pattern的行到第几行的内容，如果/pattern所处的行在第几行之后，则表示只打印匹配/pattern的行123456[root@10-46-143-76 ~]# sed -n &apos;/second/,4p&apos; dataThis is the second data lineThis is the last data line[root@10-46-143-76 ~]# sed -n &apos;/last/,2p&apos; dataThis is the last data line[root@10-46-143-76 ~]# 打印从第几行开始匹配到出现/pattern字符的行，pattern字符行也打印1234567891011121314[root@10-46-143-76 ~]# sed -n &apos;2,/last/p&apos; dataThis is the first data lineThis is the second data lineThis is the last data line[root@10-46-143-76 ~]# sed -n &apos;3,/last/p&apos; dataThis is the second data lineThis is the last data line[root@10-46-143-76 ~]# sed -n &apos;3,/this/p&apos; dataThis is the second data lineThis is the last data line[root@10-46-143-76 ~]# sed -n &apos;2,/this/p&apos; dataThis is the first data lineThis is the second data lineThis is the last data line 打印从第一次匹配到/pattern1的行，到第一次出现/pattern2的行1234567891011121314151617181920[root@10-46-143-76 ~]# sed -n &apos;/first/,/last/p&apos; dataThis is the first data lineThis is the second data lineThis is the last data line[root@10-46-143-76 ~]# sed -n &apos;/first/,/data/p&apos; dataThis is the first data lineThis is the second data line[root@10-46-143-76 ~]# sed -n &apos;/data/,/last/p&apos; dataThis is the header data lineThis is the first data lineThis is the second data lineThis is the last data line[root@10-46-143-76 ~]# sed -n &apos;/first/,/last/p&apos; dataThis is the first data lineThis is the second data lineThis is the last data line[root@10-46-143-76 ~]# sed -n &apos;2,/last/p&apos; dataThis is the first data lineThis is the second data lineThis is the last data line 打印文中第几行到第几行的内容，且打印行号，当用到sed的不同编辑命令时候，用{},且不通编辑命令之间用分号，用！表示取反1234567891011121314151617[root@10-46-143-76 ~]# sed -n &apos;1,4&#123;=;p&#125;&apos; data1This is the header data line2This is the first data line3This is the second data line4This is the last data line[root@10-46-143-76 ~]# sed -n &apos;1,2!&#123;=;p&#125;&apos; data3This is the second data line4This is the last data line[root@10-46-143-76 ~]# sed -n &apos;1,2!p&apos; dataThis is the second data lineThis is the last data line 2.使用正则表达式、扩展正则表达式（必须结合-r选项）符号 |作用 | :-: |^ | 锚点行首的符合条件的内容，用法格式”^pattern” |\$ | 锚点行首的符合条件的内容，用法格式”pattern$” |^\$|空白行|.|匹配任意单个字符||匹配紧挨在前面的字符任意次(0,1,多次)|.|匹配任意长度的任意字符|?|匹配紧挨在前面的字符0次或1次|{m,n}|匹配其前面的字符至少m次，至多n次|{m,}|匹配其前面的字符至少m次|{m}|精确匹配前面的m次{0,n}:0到n次|&lt;|锚点词首—-相当于 \b，用法格式：\&lt;pattern |锚点词尾，用法格式:>pattern|[]|匹配指定范围内的任意单个字符|[^]|匹配指定范围外的任意单个字符|\[:digit:]|所有数字, 相当于0-9， [0-9]—&gt; [[:digit:]]|[:lower:]|所有的小写字母|[:upper:]|所有的大写字母|[:alpha:]|所有的字母[:alnum:]|相当于0-9a-zA-Z[:space:]|空白字符[:punct:]|所有标点符号 sed ‘5q’ /etc/passwd #打印前5行 123456[root@10-46-143-76 ~]# sed &apos;5q&apos; /etc/passwdroot:x:0:0:root:/root:/bin/bashbin:x:1:1:bin:/bin:/sbin/nologindaemon:x:2:2:daemon:/sbin:/sbin/nologinadm:x:3:4:adm:/var/adm:/sbin/nologinlp:x:4:7:lp:/var/spool/lpd:/sbin/nologin sed-n ‘/r*t/p’ /etc/passwd #打印匹配r有0个或者多个，后接一个t字符的行12345678910111213141516[root@10-46-143-76 ~]# sed -n &quot;/r*t/p&quot; /etc/passwdroot:x:0:0:root:/root:/bin/bashshutdown:x:6:0:shutdown:/sbin:/sbin/shutdownhalt:x:7:0:halt:/sbin:/sbin/haltoperator:x:11:0:operator:/root:/sbin/nologinftp:x:14:50:FTP User:/var/ftp:/sbin/nologinsystemd-network:x:192:192:systemd Network Management:/:/sbin/nologindbus:x:81:81:System message bus:/:/sbin/nologinpolkitd:x:999:998:User for polkitd:/:/sbin/nologinlibstoragemgmt:x:998:997:daemon account for libstoragemgmt:/var/run/lsm:/sbin/nologinabrt:x:173:173::/etc/abrt:/sbin/nologinsshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologinpostfix:x:89:89::/var/spool/postfix:/sbin/nologinntp:x:38:38::/etc/ntp:/sbin/nologintcpdump:x:72:72::/:/sbin/nologindockerroot:x:996:993:Docker User:/var/lib/docker:/sbin/nologin sed -n ‘/.r.*/p’ /etc/passwd #打印匹配有r的行并且r后面跟任意字符1234567891011121314151617[root@10-46-143-76 ~]# sed -n &apos;/.r.*/p&apos; /etc/passwdroot:x:0:0:root:/root:/bin/bashadm:x:3:4:adm:/var/adm:/sbin/nologinlp:x:4:7:lp:/var/spool/lpd:/sbin/nologinmail:x:8:12:mail:/var/spool/mail:/sbin/nologinoperator:x:11:0:operator:/root:/sbin/nologingames:x:12:100:games:/usr/games:/sbin/nologinftp:x:14:50:FTP User:/var/ftp:/sbin/nologinsystemd-network:x:192:192:systemd Network Management:/:/sbin/nologinpolkitd:x:999:998:User for polkitd:/:/sbin/nologinlibstoragemgmt:x:998:997:daemon account for libstoragemgmt:/var/run/lsm:/sbin/nologinabrt:x:173:173::/etc/abrt:/sbin/nologinrpc:x:32:32:Rpcbind Daemon:/var/lib/rpcbind:/sbin/nologinsshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologinpostfix:x:89:89::/var/spool/postfix:/sbin/nologinchrony:x:997:995::/var/lib/chrony:/sbin/nologindockerroot:x:996:993:Docker User:/var/lib/docker:/sbin/nologin sed -n ‘/o*/p’ /etc/passwd#打印o字符重复任意次sed -n ‘/o{1,}/p’ /etc/passwd#打印o字重复出现一次以上sed -n ‘/o{1,3}/p’ /etc/passwd#打印o字重复出现一次到三次之间以上 sed的编辑命令(sed command)：参数 | 作用 | | :-: |p | 打印匹配行（和-n选项一起合用）|= | 显示文件行号|a\ | 在定位行号后附加新文本信息|i\ | 在定位行号后插入新文本信息|d | 删除定位行|c\ | 用新文本替换定位文本|w filename |写文本到一个文件，类似输出重定向 &gt;|r filename | 从另一个文件中读文本，类似输入重定向 &lt;|s | 使用替换模式替换相应模式|q | 第一个模式匹配完成后退出或立即退出|l | 显示与八进制ACSII代码等价的控制符|{} | 在定位行执行的命令组，用分号隔开|n |从另一个文件中读文本下一行，并从下一条命令而不是第一条命令开始对其的处理|N | 在数据流中添加下一行以创建用于处理的多行组|g | 将模式2粘贴到/pattern n/|y | 传送字符，替换单个字符|对文件的操作无非就是”增删改查“，怎样用sed命令实现对文件的”增删改查“，玩转sed是写自动化脚本必须的基础之一 打印出以#开头的行，然后用！进行反选，则表示过滤掉以#开头的行，不会过滤掉空格123456789101112[root@10-46-143-76 ~]# sed -n &apos;/^#/!p&apos; /etc/my.cnf[mysqld]datadir=/var/lib/mysqlsocket=/var/lib/mysql/mysql.socksymbolic-links=0[mysqld_safe]log-error=/var/log/mariadb/mariadb.logpid-file=/var/run/mariadb/mariadb.pid!includedir /etc/my.cnf.d 匹配以#开头的行，进行取反，则表示打印出非#开头的行，然后其结果再对空格开头进行取反；则表示过滤掉以#开头的行和空白行123456789[root@10-46-143-76 ~]# sed -n &apos;/^#/!&#123;/^$/!p&#125;&apos; /etc/my.cnf[mysqld]datadir=/var/lib/mysqlsocket=/var/lib/mysql/mysql.socksymbolic-links=0[mysqld_safe]log-error=/var/log/mariadb/mariadb.logpid-file=/var/run/mariadb/mariadb.pid!includedir /etc/my.cnf.d sed支持对耽搁文件实现不同的操作，每个操作用-e参数，删除匹配以#开始的行和空白行123456789[root@10-46-143-76 ~]# sed -e &apos;/^#/d&apos; -e &apos;/^$/d&apos; my.cnf [mysqld]datadir=/var/lib/mysqlsocket=/var/lib/mysql/mysql.socksymbolic-links=0[mysqld_safe]log-error=/var/log/mariadb/mariadb.logpid-file=/var/run/mariadb/mariadb.pid!includedir /etc/my.cnf.d 打印第一行到匹配到adm的行，adm在文件的第四行123456789[root@10-46-143-76 ~]# sed -n &apos;1,/adm/&#123;=;p&#125;&apos; /etc/passwd1root:x:0:0:root:/root:/bin/bash2bin:x:1:1:bin:/bin:/sbin/nologin3daemon:x:2:2:daemon:/sbin:/sbin/nologin4adm:x:3:4:adm:/var/adm:/sbin/nologin sed命令实现对文件内容的添加：(对源文件添加的话就用-i参数):文件内容如下：12345hello worldhello linuxhow are youi am finethanks, and you 在匹配world字符的行，行首添加Li这个字符123456[root@10-46-143-76 ~]# sed &apos;/world/s/^/Li /&apos; myfileLi hello worldhello linuxhow are youi am finethanks, and you 在匹配linux的行，在linux这个单词前面添加jie123456[root@10-46-143-76 ~]# sed &apos;s/linux/jie &amp;/&apos; myfile hello worldhello jie linuxhow are youi am finethanks, and you 在匹配linux字符串的行，在linux这个字符的后面添加jie123456[root@10-46-143-76 ~]# sed &apos;s/linux/&amp; jie/&apos; myfile hello worldhello linux jiehow are youi am finethanks, and you 在匹配you字符的行的行尾添加Li字符123456[root@10-46-143-76 ~]# sed &apos;/you/s/$/ Li/&apos; myfile hello worldhello linuxhow are you Lii am finethanks, and you Li 在匹配are字符的行的前面添加一行nihao1234567[root@10-46-143-76 ~]# sed &apos;/are/i nihao&apos; myfilehello worldhello linuxnihaohow are youi am finethanks, and you 1234567[root@10-46-143-76 ~]# sed &apos;/are/i \nihao&apos; myfilehello worldhello linuxnihaohow are youi am finethanks, and you 注意，这个不是在匹配are字符的行添加nihao123456hello worldhello linux/nihaohow are youi am finethanks, and you 在匹配are字符的行的行后，添加nihao这行1234567[root@10-46-143-76 ~]# sed &apos;/are/a nihao&apos; myfile hello worldhello linuxhow are younihaoi am finethanks, and you [root@10-46-143-76 ~]# sed ‘/are/a \nihao’ myfilehello worldhello linuxhow are younihaoi am finethanks, and you添加多行要用\n来转义12345678910111213141516[root@10-46-143-76 ~]# sed &apos;/are/a \nihao\wo hen hao&apos; myfile hello worldhello linuxhow are younihaowo hen haoi am finethanks, and you[root@10-46-143-76 ~]# sed &apos;/are/a \nihao\nwo hen hao&apos; myfile hello worldhello linuxhow are younihaowo hen haoi am finethanks, and you[root@10-46-143-76 ~]# 在每行的开头添加Start123456[root@10-46-143-76 ~]# sed &apos;s/^/Start /&apos; myfile Start hello worldStart hello linuxStart how are youStart i am fineStart thanks, and you 在每行的行尾添加end123456[root@10-46-143-76 ~]# sed &apos;s/$/ end /&apos; myfile hello world end hello linux end how are you end i am fine end thanks, and you end 指定1至三行，在行首添加#号，一般用于在配置文件中注释某行12345# hello world# hello linux# how are youi am finethanks, and you 在匹配fine这行的前面添加very字符，后面接p参数表上添加两行同样的，不加p参数只添加一行12345678910111213[root@10-46-143-76 ~]# sed &apos;s/fine/very &amp;/p&apos; myfile hello worldhello linuxhow are youi am very finei am very finethanks, and you[root@10-46-143-76 ~]# sed &apos;s/fine/very &amp;/&apos; myfile hello worldhello linuxhow are youi am very finethanks, and you sed命令不加-i参数是不会对文件直接进行操作 1234567[root@10-46-143-76 ~]# sed -i &apos;s/$/ end/&apos; myfile [root@10-46-143-76 ~]# cat myfilehello world endhello linux endhow are you endi am fine endthanks, and you end @表示地址定界符，一般由三个组成，定界符可以是/、$、#、等其他特殊字符，此命令表示，匹配hello的行，把end换成tail1234567[root@10-46-143-76 ~]# sed -i &apos;/hello/s@end@tail@&apos; myfile[root@10-46-143-76 ~]# cat myfile hello world tailhello linux tailhow are you endi am fine endthanks, and you end 在匹配tail的行尾，添加and tail 字符1234567[root@10-46-143-76 ~]# sed -i &apos;s/tail/and tail/&apos; myfile [root@10-46-143-76 ~]# cat myfile hello world and tailhello linux and tailhow are you endi am fine endthanks, and you end 1234567[root@10-46-143-76 ~]# sed -i &apos;/tail/s/$/and tail/&apos; myfile [root@10-46-143-76 ~]# cat myfile hello world and tailand tailhello linux and tailand tailhow are you endi am fine endthanks, and you end 匹配tail的行，把tail换成end,默认是修改行中第一次出现的tail后面跟g是修改全文只要出现tail的就替换成end，后面接数字子后再接g，表示匹配的行中，第几次出现，就替换。2g表示替换行中第二次出现的1234567[root@10-46-143-76 ~]# sed -e &apos;/and/s/and/or/2g&apos; myfilehello world and tail or tailhello linux and tail or tailhow are you endi am fine endthanks, and you end[root@10-46-143-76 ~]# sed命令实现对文件内容的删除：(对源文件直接删除用-i参数):sed &#39;/^#/d&#39; myfile 删除以#开头的行sed &#39;/^#/!d&#39; myfile 删除以非#开头的行，即显示以#开头的行sed &#39;1d&#39; myfile 删除文件的第一行，即首行sed &#39;$d&#39; myfile 删除文件的最后一行，即尾行sed &#39;2,4d&#39; myflie 删除文件指定的行sed &#39;/thanks/d&#39; myfile 删除匹配thanks的行sed &#39;/o/d&#39; myfile删除匹配o这个字符的行，文件中含有o字符的行都删除sed &#39;/\&lt;you\&gt;/d&#39; myfile 删除文件中含有you这个单词的行，\&lt;>作单词牟定-i参数，直接对文件进行操作，当需要删除多种不同的匹配模式时，可以-e参数，此sed命令表示删除匹配sed字符的行和匹配以#开头的行sed -i -e &#39;/sed/d&#39; -e/^#/d myfile sed -i &#39;/i/d&#39; myfile 删除匹配i字符的行sed -i &#39;/End$/d&#39; myfile 删除以end结尾的行 重点：sed命令实现对文件内容的替换（替换是在shell自动化脚本中用到最多的操作）1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#================源文件里面的内容=============================== [root@jie1 ~]# cat test anonymous_enable=YES write_enable=YES local_umask=022 xferlog_enable=YES connect_from_port_20=YES root:x:0:0:root:/root:/bin/bash bin:x:1:1:bin:/bin:/sbin/nologin daemon:x:2:2:daemon:/sbin:/sbin/nologin adm:x:3:4:adm:/var/adm:/sbin/nologin lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin DEVICE=&quot;eth0&quot; BOOTPROTO=&quot;static&quot; HWADDR=&quot;00:0C:29:90:79:78&quot; ONBOOT=&quot;yes&quot; IPADDR=172.16.22.1 NETMASK=255.255.0.0 #====================================================================== [root@jie1 ~]# sed -i &apos;/DEVICE/c\Ethernet&apos; test #匹配DEVICE的行，替换成Ethernet这行 [root@jie1 ~]# sed -i &apos;s/static/dhcp/&apos; test #把static替换成dhcp(/,@,#都是前面所说的地址定界符) [root@jie1 ~]# sed -i &apos;/IPADDR/s@22\.1@10.12@&apos; test #匹配IPADDR的行，把22.1替换成10.12由于.号有特殊意义所有需要转义 [root@jie1 ~]# sed -i &apos;/connect/s#YES#NO#&apos; test #匹配connect的行，把YES替换成NO [root@jie1 ~]# sed -i &apos;s/bin/tom/2g&apos; test #把所有匹配到bin的行中第二次及第二次之后出现bin替换成tom [root@jie1 ~]# sed -i &apos;s/daemon/jerry/2p&apos; test #把所有匹配到bin的行中第二次出现的daemon替换成jerry，并在生产与匹配行同样的行 [root@jie1 ~]# sed -i &apos;s/adm/boss/2&apos; test #把所有匹配到adm的行中仅仅只是第二次出现的adm替换成boss [root@jie1 ~]# sed -i &apos;/root/&#123;s/bash/nologin/;s/0/1/g&#125;&apos; test #匹配root的行，把bash替换成nologin，且把0替换成1 [root@jie1 ~]# sed -i &apos;s/root/(&amp;)/g&apos; test #把root用括号括起来，&amp;表示引用前面匹配的字符 [root@jie1 ~]# sed -i &apos;s/BOOTPROTO/#BOOTPROTO/&apos; test #匹配BOOTPROTO替换成#BOOTPROTO，在配置文件中一般用于注释某行 [root@jie1 ~]# sed -i &apos;s/ONBOOT/#&amp;/&apos; test #匹配ONBOOT的行的前面添加#号，在配置文件中也表示注释某行 [root@jie1 ~]# sed -i &apos;/ONBOOT/s/#//&apos; test #匹配ONBOOT的行，把#替换成空，即去掉#号，也一般用作去掉#注释 #================执行以上sed命令之后文件显示的内容==================== [root@jie1 ~]# cat test anonymous_enable=YES write_enable=YES local_umask=022 xferlog_enable=YES connect_from_port_20=NO (root):x:1:1:(root):/(root):/bin/nologin bin:x:1:1:tom:/tom:/stom/nologin daemon:x:2:2:jerry:/sbin:/stom/nologin daemon:x:2:2:jerry:/sbin:/stom/nologin adm:x:3:4:boss:/var/adm:/sbin/nologin lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin Ethernet #BOOTPROTO=&quot;dhcp&quot; HWADDR=&quot;00:0C:29:90:79:78&quot; ONBOOT=&quot;yes&quot; IPADDR=172.16.10.12 NETMASK=255.255.0.0 sed引用变量：（在自动化shell脚本 中也经常会使用到变量） 第一种当sed命令里面没有默认的变量时可以把单引号改成双引号； 第二种当sed命令里面有默认的变量时，那自己定义的变量需要加单引号，且sed里面的语句必须用单引12345678910111213141516171819202122232425262728[root@jie1 ~]# cat &gt;&gt; myfile &lt;&lt; EOF &gt; hello world &gt; i am jie &gt; how are you &gt; EOF #先生成一个文件 [root@jie1 ~]# cat myfile hello world i am jie how are you [root@jie1 ~]# name=li #定义一个变量，且给变量赋值 [root@jie1 ~]# sed -i &quot;s/jie/$name/&quot; myfile #把匹配jie的字符替换成变量的值 [root@jie1 ~]# cat myfile hello world i am li how are you [root@jie1 ~]# sed -i &quot;$a $name&quot; myfile #当sed命令也有默认变量时，在去引用自己定义的变量会出现语法错误 sed: -e expression #1, char 3: extra characters after command [root@jie1 ~]# sed -i &apos;$a &apos;$name&apos;&apos; myfile #在引用自定义的变量时，sed语句必须用单引引住，然后把自定义的变量也用单引号引住 [root@jie1 ~]# cat myfile hello world i am li how are you li [root@jie1 ~]# sed的其它高级使用： 1）把正在用sed操作的文件的内容写到例外一个文件中123456789101112[root@jie1 ~]# cat test #sed操作的文件中的内容 Ethernet #BOOTPROTO=&quot;dhcp&quot; HWADDR=&quot;00:0C:29:90:79:78&quot; ONBOOT=&quot;yes&quot; IPADDR=172.16.10.12 NETMASK=255.255.0.0 [root@jie1 ~]# sed -i &apos;s/IPADDR/ip/w ip.txt&apos; test #把sed操作的文件内容保存到另外一个文件中，w表示保存，ip.txt文件名 [root@jie1 ~]# cat ip.txt #查看新文件的内容 ip=172.16.10.12 [root@jie1 ~]# 2）读取一个文件到正在用sed操作的文件中1234567891011121314151617181920212223242526[root@jie1 ~]# cat myfile #文件内容 hello world i am li how are you li [root@jie1 ~]# cat test #将用sed操作的文件的内容 Ethernet #BOOTPROTO=&quot;dhcp&quot; HWADDR=&quot;00:0C:29:90:79:78&quot; ONBOOT=&quot;yes&quot; IPADDR=172.16.10.12 NETMASK=255.255.0.0 [root@jie1 ~]# sed -i &apos;/Ethernet/r myfile&apos; test #在匹配Ethernet的行，读进来另一个文件的内容，读进来的文件的内容会插入到匹配Ethernet的行后 [root@jie1 ~]# cat test #再次查看用sed命令操作的行 Ethernet hello world i am li how are you li #BOOTPROTO=&quot;dhcp&quot; HWADDR=&quot;00:0C:29:90:79:78&quot; ONBOOT=&quot;yes&quot; IPADDR=172.16.10.12 NETMASK=255.255.0.0 [root@jie1 ~]# sed的经典例子：12345678910111213141516171819202122##1）、处理以下文件内容,将域名取出并进行计数排序,如处理: http://www.baidu.com/index.&lt;a target=&quot;_blank&quot; href=&quot;http://www.2cto.com/kf/qianduan/css/&quot; class=&quot;keylink&quot; style=&quot;border:none; padding:0px; margin:0px; color:rgb(51,51,51); text-decoration:none; font-size:14px&quot;&gt;html&lt;/a&gt; http://www.baidu.com/1.html http://post.baidu.com/index.html http://mp3.baidu.com/index.html http://www.baidu.com/3.html http://post.baidu.com/2.html 得到如下结果: 域名的出现的次数 域名 3 www.baidu.com 2 post.baidu.com 1 mp3.baidu.com [root@localhost shell]# cat file | sed -e &apos; s/http:\/\///&apos; -e &apos; s/\/.*//&apos; | sort | uniq -c | sort -rn 3 www.baidu.com 2 post.baidu.com 1 mp3.baidu.com [root@codfei4 shell]# awk -F/ &apos;&#123;print $3&#125;&apos; file |sort -r|uniq -c|awk &apos;&#123;print $1&quot;\t&quot;,$2&#125;&apos; 3 www.baidu.com 2 post.baidu.com 1 mp3.baidu.com ##2）、用grep结合sed取出网卡的ip地址 [root@jie1 ~]# ifconfig | grep -B1 &quot;inet addr&quot; |grep -v &quot;\-\-&quot; |sed -n -e &apos;N;s/eth[0−9].*\n.*addr:[0−9]&#123;1,3&#125;\.[0−9]&#123;1,3&#125;\.[0−9]&#123;1,3&#125;\.[0−9]&#123;1,3&#125;.*/\1 \2/p&apos;]]></content>
      <categories>
        <category>命令</category>
      </categories>
      <tags>
        <tag>常用命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker 的基本命令]]></title>
    <url>%2F2019%2F05%2F01%2Fdocker-%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[删除所有未运行的docker容器 docker rm $(docker ps -a -q) 删除所有docker镜像&amp;删除所有未打tag的镜像 docker rmi $(docker images -q | awk &#39;/^&lt;none&gt;/ {print $3}&#39;) 删除所有镜像 docker rmi $(docker images -q) 根据格式删除所有的镜像 docker rm $(docker ps -qf status=exited) 删除停止的容器 docker rm $(docker ps -all -q -f status=exited) 删除没有使用过的镜像 docker rmi $(docker images | grep &quot;&lt;none&gt;&quot; | awk &quot;{print \$3}&quot;) 批量删除镜像 docker images | awk &#39;{print $3}&#39; | xargs docker rmi 批量删除容器 docker ps -a | awk &#39;{print $1}&#39; | xargs docker rm 以特权模式运行容器（systemct） docker run -d -name centos7 --privileged=true centos:7 /usr/sbin/init docker exec -it centos7 /bin/bash]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>命令 docker</tag>
      </tags>
  </entry>
</search>
