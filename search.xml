<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[sed基本用法]]></title>
    <url>%2F2019%2F05%2F05%2Fsed%E5%91%BD%E4%BB%A4%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95%2F</url>
    <content type="text"><![CDATA[sed在文件中查询文本的基本方法：n和p命令一起使用表示只打印那些发生替换的行 1.使用行号，可以是一个简单数字，或是一个行号范围符号 |作用 | :-: |x | x为行号|x,y | 表示行号从x到y/pattern | 表示包含模式的行/pattern /pattern | 表示包含两个模式的行pattern/,x | 在给定行号上查询包含模式的行x，/pattern | 通过行号和模式查询匹配的行x,y! | 查询包含指定行号x和y的行12345[root@10-46-143-76 ~]# cat dataThis is the header data lineThis is the first data lineThis is the second data lineThis is the last data line 打印文中的第几行，第行会打印两遍，sed默认打印文中的所有行123456[root@10-46-143-76 ~]# sed &apos;2p&apos; dataThis is the header data lineThis is the first data lineThis is the first data lineThis is the second data lineThis is the last data line sed用-n选项，表示只打印匹配的行12[root@10-46-143-76 ~]# sed -n &apos;2p&apos; dataThis is the first data line 1234[root@10-46-143-76 ~]# sed -n &apos;1,3p&apos; data 表示打印文中第一行到第三行This is the header data lineThis is the first data lineThis is the second data line 12[root@10-46-143-76 ~]# sed -n &apos;/second/p&apos; data 表示打印文件中匹配second的行This is the second data line 打印文中从匹配到/pattern的行到第几行的内容，如果/pattern所处的行在第几行之后，则表示只打印匹配/pattern的行123456[root@10-46-143-76 ~]# sed -n &apos;/second/,4p&apos; dataThis is the second data lineThis is the last data line[root@10-46-143-76 ~]# sed -n &apos;/last/,2p&apos; dataThis is the last data line[root@10-46-143-76 ~]# 打印从第几行开始匹配到出现/pattern字符的行，pattern字符行也打印1234567891011121314[root@10-46-143-76 ~]# sed -n &apos;2,/last/p&apos; dataThis is the first data lineThis is the second data lineThis is the last data line[root@10-46-143-76 ~]# sed -n &apos;3,/last/p&apos; dataThis is the second data lineThis is the last data line[root@10-46-143-76 ~]# sed -n &apos;3,/this/p&apos; dataThis is the second data lineThis is the last data line[root@10-46-143-76 ~]# sed -n &apos;2,/this/p&apos; dataThis is the first data lineThis is the second data lineThis is the last data line 打印从第一次匹配到/pattern1的行，到第一次出现/pattern2的行1234567891011121314151617181920[root@10-46-143-76 ~]# sed -n &apos;/first/,/last/p&apos; dataThis is the first data lineThis is the second data lineThis is the last data line[root@10-46-143-76 ~]# sed -n &apos;/first/,/data/p&apos; dataThis is the first data lineThis is the second data line[root@10-46-143-76 ~]# sed -n &apos;/data/,/last/p&apos; dataThis is the header data lineThis is the first data lineThis is the second data lineThis is the last data line[root@10-46-143-76 ~]# sed -n &apos;/first/,/last/p&apos; dataThis is the first data lineThis is the second data lineThis is the last data line[root@10-46-143-76 ~]# sed -n &apos;2,/last/p&apos; dataThis is the first data lineThis is the second data lineThis is the last data line 打印文中第几行到第几行的内容，且打印行号，当用到sed的不同编辑命令时候，用{},且不通编辑命令之间用分号，用！表示取反1234567891011121314151617[root@10-46-143-76 ~]# sed -n &apos;1,4&#123;=;p&#125;&apos; data1This is the header data line2This is the first data line3This is the second data line4This is the last data line[root@10-46-143-76 ~]# sed -n &apos;1,2!&#123;=;p&#125;&apos; data3This is the second data line4This is the last data line[root@10-46-143-76 ~]# sed -n &apos;1,2!p&apos; dataThis is the second data lineThis is the last data line 2.使用正则表达式、扩展正则表达式（必须结合-r选项）符号 |作用 | :-: |^ | 锚点行首的符合条件的内容，用法格式”^pattern” |\$ | 锚点行首的符合条件的内容，用法格式”pattern$” |^\$|空白行|.|匹配任意单个字符||匹配紧挨在前面的字符任意次(0,1,多次)|.|匹配任意长度的任意字符|?|匹配紧挨在前面的字符0次或1次|{m,n}|匹配其前面的字符至少m次，至多n次|{m,}|匹配其前面的字符至少m次|{m}|精确匹配前面的m次{0,n}:0到n次|&lt;|锚点词首—-相当于 \b，用法格式：\&lt;pattern |锚点词尾，用法格式:>pattern|[]|匹配指定范围内的任意单个字符|[^]|匹配指定范围外的任意单个字符|\[:digit:]|所有数字, 相当于0-9， [0-9]—&gt; [[:digit:]]|[:lower:]|所有的小写字母|[:upper:]|所有的大写字母|[:alpha:]|所有的字母[:alnum:]|相当于0-9a-zA-Z[:space:]|空白字符[:punct:]|所有标点符号 sed ‘5q’ /etc/passwd #打印前5行 123456[root@10-46-143-76 ~]# sed &apos;5q&apos; /etc/passwdroot:x:0:0:root:/root:/bin/bashbin:x:1:1:bin:/bin:/sbin/nologindaemon:x:2:2:daemon:/sbin:/sbin/nologinadm:x:3:4:adm:/var/adm:/sbin/nologinlp:x:4:7:lp:/var/spool/lpd:/sbin/nologin sed-n ‘/r*t/p’ /etc/passwd #打印匹配r有0个或者多个，后接一个t字符的行12345678910111213141516[root@10-46-143-76 ~]# sed -n &quot;/r*t/p&quot; /etc/passwdroot:x:0:0:root:/root:/bin/bashshutdown:x:6:0:shutdown:/sbin:/sbin/shutdownhalt:x:7:0:halt:/sbin:/sbin/haltoperator:x:11:0:operator:/root:/sbin/nologinftp:x:14:50:FTP User:/var/ftp:/sbin/nologinsystemd-network:x:192:192:systemd Network Management:/:/sbin/nologindbus:x:81:81:System message bus:/:/sbin/nologinpolkitd:x:999:998:User for polkitd:/:/sbin/nologinlibstoragemgmt:x:998:997:daemon account for libstoragemgmt:/var/run/lsm:/sbin/nologinabrt:x:173:173::/etc/abrt:/sbin/nologinsshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologinpostfix:x:89:89::/var/spool/postfix:/sbin/nologinntp:x:38:38::/etc/ntp:/sbin/nologintcpdump:x:72:72::/:/sbin/nologindockerroot:x:996:993:Docker User:/var/lib/docker:/sbin/nologin sed -n ‘/.r.*/p’ /etc/passwd #打印匹配有r的行并且r后面跟任意字符1234567891011121314151617[root@10-46-143-76 ~]# sed -n &apos;/.r.*/p&apos; /etc/passwdroot:x:0:0:root:/root:/bin/bashadm:x:3:4:adm:/var/adm:/sbin/nologinlp:x:4:7:lp:/var/spool/lpd:/sbin/nologinmail:x:8:12:mail:/var/spool/mail:/sbin/nologinoperator:x:11:0:operator:/root:/sbin/nologingames:x:12:100:games:/usr/games:/sbin/nologinftp:x:14:50:FTP User:/var/ftp:/sbin/nologinsystemd-network:x:192:192:systemd Network Management:/:/sbin/nologinpolkitd:x:999:998:User for polkitd:/:/sbin/nologinlibstoragemgmt:x:998:997:daemon account for libstoragemgmt:/var/run/lsm:/sbin/nologinabrt:x:173:173::/etc/abrt:/sbin/nologinrpc:x:32:32:Rpcbind Daemon:/var/lib/rpcbind:/sbin/nologinsshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologinpostfix:x:89:89::/var/spool/postfix:/sbin/nologinchrony:x:997:995::/var/lib/chrony:/sbin/nologindockerroot:x:996:993:Docker User:/var/lib/docker:/sbin/nologin sed -n ‘/o*/p’ /etc/passwd#打印o字符重复任意次sed -n ‘/o{1,}/p’ /etc/passwd#打印o字重复出现一次以上sed -n ‘/o{1,3}/p’ /etc/passwd#打印o字重复出现一次到三次之间以上 sed的编辑命令(sed command)：参数 | 作用 | | :-: |p | 打印匹配行（和-n选项一起合用）|= | 显示文件行号|a\ | 在定位行号后附加新文本信息|i\ | 在定位行号后插入新文本信息|d | 删除定位行|c\ | 用新文本替换定位文本|w filename |写文本到一个文件，类似输出重定向 &gt;|r filename | 从另一个文件中读文本，类似输入重定向 &lt;|s | 使用替换模式替换相应模式|q | 第一个模式匹配完成后退出或立即退出|l | 显示与八进制ACSII代码等价的控制符|{} | 在定位行执行的命令组，用分号隔开|n |从另一个文件中读文本下一行，并从下一条命令而不是第一条命令开始对其的处理|N | 在数据流中添加下一行以创建用于处理的多行组|g | 将模式2粘贴到/pattern n/|y | 传送字符，替换单个字符|对文件的操作无非就是”增删改查“，怎样用sed命令实现对文件的”增删改查“，玩转sed是写自动化脚本必须的基础之一 打印出以#开头的行，然后用！进行反选，则表示过滤掉以#开头的行，不会过滤掉空格123456789101112[root@10-46-143-76 ~]# sed -n &apos;/^#/!p&apos; /etc/my.cnf[mysqld]datadir=/var/lib/mysqlsocket=/var/lib/mysql/mysql.socksymbolic-links=0[mysqld_safe]log-error=/var/log/mariadb/mariadb.logpid-file=/var/run/mariadb/mariadb.pid!includedir /etc/my.cnf.d 匹配以#开头的行，进行取反，则表示打印出非#开头的行，然后其结果再对空格开头进行取反；则表示过滤掉以#开头的行和空白行123456789[root@10-46-143-76 ~]# sed -n &apos;/^#/!&#123;/^$/!p&#125;&apos; /etc/my.cnf[mysqld]datadir=/var/lib/mysqlsocket=/var/lib/mysql/mysql.socksymbolic-links=0[mysqld_safe]log-error=/var/log/mariadb/mariadb.logpid-file=/var/run/mariadb/mariadb.pid!includedir /etc/my.cnf.d sed支持对耽搁文件实现不同的操作，每个操作用-e参数，删除匹配以#开始的行和空白行123456789[root@10-46-143-76 ~]# sed -e &apos;/^#/d&apos; -e &apos;/^$/d&apos; my.cnf [mysqld]datadir=/var/lib/mysqlsocket=/var/lib/mysql/mysql.socksymbolic-links=0[mysqld_safe]log-error=/var/log/mariadb/mariadb.logpid-file=/var/run/mariadb/mariadb.pid!includedir /etc/my.cnf.d 打印第一行到匹配到adm的行，adm在文件的第四行123456789[root@10-46-143-76 ~]# sed -n &apos;1,/adm/&#123;=;p&#125;&apos; /etc/passwd1root:x:0:0:root:/root:/bin/bash2bin:x:1:1:bin:/bin:/sbin/nologin3daemon:x:2:2:daemon:/sbin:/sbin/nologin4adm:x:3:4:adm:/var/adm:/sbin/nologin sed命令实现对文件内容的添加：(对源文件添加的话就用-i参数):文件内容如下：12345hello worldhello linuxhow are youi am finethanks, and you 在匹配world字符的行，行首添加Li这个字符123456[root@10-46-143-76 ~]# sed &apos;/world/s/^/Li /&apos; myfileLi hello worldhello linuxhow are youi am finethanks, and you 在匹配linux的行，在linux这个单词前面添加jie123456[root@10-46-143-76 ~]# sed &apos;s/linux/jie &amp;/&apos; myfile hello worldhello jie linuxhow are youi am finethanks, and you 在匹配linux字符串的行，在linux这个字符的后面添加jie123456[root@10-46-143-76 ~]# sed &apos;s/linux/&amp; jie/&apos; myfile hello worldhello linux jiehow are youi am finethanks, and you 在匹配you字符的行的行尾添加Li字符123456[root@10-46-143-76 ~]# sed &apos;/you/s/$/ Li/&apos; myfile hello worldhello linuxhow are you Lii am finethanks, and you Li 在匹配are字符的行的前面添加一行nihao1234567[root@10-46-143-76 ~]# sed &apos;/are/i nihao&apos; myfilehello worldhello linuxnihaohow are youi am finethanks, and you 1234567[root@10-46-143-76 ~]# sed &apos;/are/i \nihao&apos; myfilehello worldhello linuxnihaohow are youi am finethanks, and you 注意，这个不是在匹配are字符的行添加nihao123456hello worldhello linux/nihaohow are youi am finethanks, and you 在匹配are字符的行的行后，添加nihao这行1234567[root@10-46-143-76 ~]# sed &apos;/are/a nihao&apos; myfile hello worldhello linuxhow are younihaoi am finethanks, and you [root@10-46-143-76 ~]# sed ‘/are/a \nihao’ myfilehello worldhello linuxhow are younihaoi am finethanks, and you添加多行要用\n来转义12345678910111213141516[root@10-46-143-76 ~]# sed &apos;/are/a \nihao\wo hen hao&apos; myfile hello worldhello linuxhow are younihaowo hen haoi am finethanks, and you[root@10-46-143-76 ~]# sed &apos;/are/a \nihao\nwo hen hao&apos; myfile hello worldhello linuxhow are younihaowo hen haoi am finethanks, and you[root@10-46-143-76 ~]# 在每行的开头添加Start123456[root@10-46-143-76 ~]# sed &apos;s/^/Start /&apos; myfile Start hello worldStart hello linuxStart how are youStart i am fineStart thanks, and you 在每行的行尾添加end123456[root@10-46-143-76 ~]# sed &apos;s/$/ end /&apos; myfile hello world end hello linux end how are you end i am fine end thanks, and you end 指定1至三行，在行首添加#号，一般用于在配置文件中注释某行12345# hello world# hello linux# how are youi am finethanks, and you 在匹配fine这行的前面添加very字符，后面接p参数表上添加两行同样的，不加p参数只添加一行12345678910111213[root@10-46-143-76 ~]# sed &apos;s/fine/very &amp;/p&apos; myfile hello worldhello linuxhow are youi am very finei am very finethanks, and you[root@10-46-143-76 ~]# sed &apos;s/fine/very &amp;/&apos; myfile hello worldhello linuxhow are youi am very finethanks, and you sed命令不加-i参数是不会对文件直接进行操作 1234567[root@10-46-143-76 ~]# sed -i &apos;s/$/ end/&apos; myfile [root@10-46-143-76 ~]# cat myfilehello world endhello linux endhow are you endi am fine endthanks, and you end @表示地址定界符，一般由三个组成，定界符可以是/、$、#、等其他特殊字符，此命令表示，匹配hello的行，把end换成tail1234567[root@10-46-143-76 ~]# sed -i &apos;/hello/s@end@tail@&apos; myfile[root@10-46-143-76 ~]# cat myfile hello world tailhello linux tailhow are you endi am fine endthanks, and you end 在匹配tail的行尾，添加and tail 字符1234567[root@10-46-143-76 ~]# sed -i &apos;s/tail/and tail/&apos; myfile [root@10-46-143-76 ~]# cat myfile hello world and tailhello linux and tailhow are you endi am fine endthanks, and you end 1234567[root@10-46-143-76 ~]# sed -i &apos;/tail/s/$/and tail/&apos; myfile [root@10-46-143-76 ~]# cat myfile hello world and tailand tailhello linux and tailand tailhow are you endi am fine endthanks, and you end 匹配tail的行，把tail换成end,默认是修改行中第一次出现的tail后面跟g是修改全文只要出现tail的就替换成end，后面接数字子后再接g，表示匹配的行中，第几次出现，就替换。2g表示替换行中第二次出现的1234567[root@10-46-143-76 ~]# sed -e &apos;/and/s/and/or/2g&apos; myfilehello world and tail or tailhello linux and tail or tailhow are you endi am fine endthanks, and you end[root@10-46-143-76 ~]# sed命令实现对文件内容的删除：(对源文件直接删除用-i参数):sed &#39;/^#/d&#39; myfile 删除以#开头的行sed &#39;/^#/!d&#39; myfile 删除以非#开头的行，即显示以#开头的行sed &#39;1d&#39; myfile 删除文件的第一行，即首行sed &#39;$d&#39; myfile 删除文件的最后一行，即尾行sed &#39;2,4d&#39; myflie 删除文件指定的行sed &#39;/thanks/d&#39; myfile 删除匹配thanks的行sed &#39;/o/d&#39; myfile删除匹配o这个字符的行，文件中含有o字符的行都删除sed &#39;/\&lt;you\&gt;/d&#39; myfile 删除文件中含有you这个单词的行，\&lt;>作单词牟定-i参数，直接对文件进行操作，当需要删除多种不同的匹配模式时，可以-e参数，此sed命令表示删除匹配sed字符的行和匹配以#开头的行sed -i -e &#39;/sed/d&#39; -e/^#/d myfile sed -i &#39;/i/d&#39; myfile 删除匹配i字符的行sed -i &#39;/End$/d&#39; myfile 删除以end结尾的行 重点：sed命令实现对文件内容的替换（替换是在shell自动化脚本中用到最多的操作）1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#================源文件里面的内容=============================== [root@jie1 ~]# cat test anonymous_enable=YES write_enable=YES local_umask=022 xferlog_enable=YES connect_from_port_20=YES root:x:0:0:root:/root:/bin/bash bin:x:1:1:bin:/bin:/sbin/nologin daemon:x:2:2:daemon:/sbin:/sbin/nologin adm:x:3:4:adm:/var/adm:/sbin/nologin lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin DEVICE=&quot;eth0&quot; BOOTPROTO=&quot;static&quot; HWADDR=&quot;00:0C:29:90:79:78&quot; ONBOOT=&quot;yes&quot; IPADDR=172.16.22.1 NETMASK=255.255.0.0 #====================================================================== [root@jie1 ~]# sed -i &apos;/DEVICE/c\Ethernet&apos; test #匹配DEVICE的行，替换成Ethernet这行 [root@jie1 ~]# sed -i &apos;s/static/dhcp/&apos; test #把static替换成dhcp(/,@,#都是前面所说的地址定界符) [root@jie1 ~]# sed -i &apos;/IPADDR/s@22\.1@10.12@&apos; test #匹配IPADDR的行，把22.1替换成10.12由于.号有特殊意义所有需要转义 [root@jie1 ~]# sed -i &apos;/connect/s#YES#NO#&apos; test #匹配connect的行，把YES替换成NO [root@jie1 ~]# sed -i &apos;s/bin/tom/2g&apos; test #把所有匹配到bin的行中第二次及第二次之后出现bin替换成tom [root@jie1 ~]# sed -i &apos;s/daemon/jerry/2p&apos; test #把所有匹配到bin的行中第二次出现的daemon替换成jerry，并在生产与匹配行同样的行 [root@jie1 ~]# sed -i &apos;s/adm/boss/2&apos; test #把所有匹配到adm的行中仅仅只是第二次出现的adm替换成boss [root@jie1 ~]# sed -i &apos;/root/&#123;s/bash/nologin/;s/0/1/g&#125;&apos; test #匹配root的行，把bash替换成nologin，且把0替换成1 [root@jie1 ~]# sed -i &apos;s/root/(&amp;)/g&apos; test #把root用括号括起来，&amp;表示引用前面匹配的字符 [root@jie1 ~]# sed -i &apos;s/BOOTPROTO/#BOOTPROTO/&apos; test #匹配BOOTPROTO替换成#BOOTPROTO，在配置文件中一般用于注释某行 [root@jie1 ~]# sed -i &apos;s/ONBOOT/#&amp;/&apos; test #匹配ONBOOT的行的前面添加#号，在配置文件中也表示注释某行 [root@jie1 ~]# sed -i &apos;/ONBOOT/s/#//&apos; test #匹配ONBOOT的行，把#替换成空，即去掉#号，也一般用作去掉#注释 #================执行以上sed命令之后文件显示的内容==================== [root@jie1 ~]# cat test anonymous_enable=YES write_enable=YES local_umask=022 xferlog_enable=YES connect_from_port_20=NO (root):x:1:1:(root):/(root):/bin/nologin bin:x:1:1:tom:/tom:/stom/nologin daemon:x:2:2:jerry:/sbin:/stom/nologin daemon:x:2:2:jerry:/sbin:/stom/nologin adm:x:3:4:boss:/var/adm:/sbin/nologin lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin Ethernet #BOOTPROTO=&quot;dhcp&quot; HWADDR=&quot;00:0C:29:90:79:78&quot; ONBOOT=&quot;yes&quot; IPADDR=172.16.10.12 NETMASK=255.255.0.0 sed引用变量：（在自动化shell脚本 中也经常会使用到变量） 第一种当sed命令里面没有默认的变量时可以把单引号改成双引号； 第二种当sed命令里面有默认的变量时，那自己定义的变量需要加单引号，且sed里面的语句必须用单引12345678910111213141516171819202122232425262728[root@jie1 ~]# cat &gt;&gt; myfile &lt;&lt; EOF &gt; hello world &gt; i am jie &gt; how are you &gt; EOF #先生成一个文件 [root@jie1 ~]# cat myfile hello world i am jie how are you [root@jie1 ~]# name=li #定义一个变量，且给变量赋值 [root@jie1 ~]# sed -i &quot;s/jie/$name/&quot; myfile #把匹配jie的字符替换成变量的值 [root@jie1 ~]# cat myfile hello world i am li how are you [root@jie1 ~]# sed -i &quot;$a $name&quot; myfile #当sed命令也有默认变量时，在去引用自己定义的变量会出现语法错误 sed: -e expression #1, char 3: extra characters after command [root@jie1 ~]# sed -i &apos;$a &apos;$name&apos;&apos; myfile #在引用自定义的变量时，sed语句必须用单引引住，然后把自定义的变量也用单引号引住 [root@jie1 ~]# cat myfile hello world i am li how are you li [root@jie1 ~]# sed的其它高级使用： 1）把正在用sed操作的文件的内容写到例外一个文件中123456789101112[root@jie1 ~]# cat test #sed操作的文件中的内容 Ethernet #BOOTPROTO=&quot;dhcp&quot; HWADDR=&quot;00:0C:29:90:79:78&quot; ONBOOT=&quot;yes&quot; IPADDR=172.16.10.12 NETMASK=255.255.0.0 [root@jie1 ~]# sed -i &apos;s/IPADDR/ip/w ip.txt&apos; test #把sed操作的文件内容保存到另外一个文件中，w表示保存，ip.txt文件名 [root@jie1 ~]# cat ip.txt #查看新文件的内容 ip=172.16.10.12 [root@jie1 ~]# 2）读取一个文件到正在用sed操作的文件中1234567891011121314151617181920212223242526[root@jie1 ~]# cat myfile #文件内容 hello world i am li how are you li [root@jie1 ~]# cat test #将用sed操作的文件的内容 Ethernet #BOOTPROTO=&quot;dhcp&quot; HWADDR=&quot;00:0C:29:90:79:78&quot; ONBOOT=&quot;yes&quot; IPADDR=172.16.10.12 NETMASK=255.255.0.0 [root@jie1 ~]# sed -i &apos;/Ethernet/r myfile&apos; test #在匹配Ethernet的行，读进来另一个文件的内容，读进来的文件的内容会插入到匹配Ethernet的行后 [root@jie1 ~]# cat test #再次查看用sed命令操作的行 Ethernet hello world i am li how are you li #BOOTPROTO=&quot;dhcp&quot; HWADDR=&quot;00:0C:29:90:79:78&quot; ONBOOT=&quot;yes&quot; IPADDR=172.16.10.12 NETMASK=255.255.0.0 [root@jie1 ~]# sed的经典例子：12345678910111213141516171819202122##1）、处理以下文件内容,将域名取出并进行计数排序,如处理: http://www.baidu.com/index.&lt;a target=&quot;_blank&quot; href=&quot;http://www.2cto.com/kf/qianduan/css/&quot; class=&quot;keylink&quot; style=&quot;border:none; padding:0px; margin:0px; color:rgb(51,51,51); text-decoration:none; font-size:14px&quot;&gt;html&lt;/a&gt; http://www.baidu.com/1.html http://post.baidu.com/index.html http://mp3.baidu.com/index.html http://www.baidu.com/3.html http://post.baidu.com/2.html 得到如下结果: 域名的出现的次数 域名 3 www.baidu.com 2 post.baidu.com 1 mp3.baidu.com [root@localhost shell]# cat file | sed -e &apos; s/http:\/\///&apos; -e &apos; s/\/.*//&apos; | sort | uniq -c | sort -rn 3 www.baidu.com 2 post.baidu.com 1 mp3.baidu.com [root@codfei4 shell]# awk -F/ &apos;&#123;print $3&#125;&apos; file |sort -r|uniq -c|awk &apos;&#123;print $1&quot;\t&quot;,$2&#125;&apos; 3 www.baidu.com 2 post.baidu.com 1 mp3.baidu.com ##2）、用grep结合sed取出网卡的ip地址 [root@jie1 ~]# ifconfig | grep -B1 &quot;inet addr&quot; |grep -v &quot;\-\-&quot; |sed -n -e &apos;N;s/eth[0−9].*\n.*addr:[0−9]&#123;1,3&#125;\.[0−9]&#123;1,3&#125;\.[0−9]&#123;1,3&#125;\.[0−9]&#123;1,3&#125;.*/\1 \2/p&apos;]]></content>
      <categories>
        <category>命令</category>
      </categories>
      <tags>
        <tag>常用命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker 的基本命令]]></title>
    <url>%2F2019%2F05%2F01%2Fdocker-%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[删除所有未运行的docker容器 docker rm $(docker ps -a -q) 删除所有docker镜像&amp;删除所有未打tag的镜像 docker rmi $(docker images -q | awk &#39;/^&lt;none&gt;/ {print $3}&#39;) 删除所有镜像 docker rmi $(docker images -q) 根据格式删除所有的镜像 docker rm $(docker ps -qf status=exited) 删除停止的容器 docker rm $(docker ps -all -q -f status=exited) 删除没有使用过的镜像 docker rmi $(docker images | grep &quot;&lt;none&gt;&quot; | awk &quot;{print \$3}&quot;) 批量删除镜像 docker images | awk &#39;{print $3}&#39; | xargs docker rmi 批量删除容器 docker ps -a | awk &#39;{print $1}&#39; | xargs docker rm 以特权模式运行容器（systemct） docker run -d -name centos7 --privileged=true centos:7 /usr/sbin/init docker exec -it centos7 /bin/bash]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>命令 docker</tag>
      </tags>
  </entry>
</search>
